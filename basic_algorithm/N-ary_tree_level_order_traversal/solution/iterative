/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        Queue<Node> queue = new LinkedList<Node>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> list = new ArrayList<Integer>();
            while (0 != size--) {
                Node node = queue.poll();
                if (null == node) {
                    continue;
                }
                for (Node child : node.children) {
                    queue.offer(child);
                }
                list.add(node.val);
            }
            if (0 != list.size()) {
                lists.add(list);
            }
        }
        
        return lists;
    }
}
